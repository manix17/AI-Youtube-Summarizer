#!/usr/bin/env node

/**
 * Script to automatically sync dom_parser.ts and summary.css to tools folder for testing
 * This ensures the test page always uses the latest version of the parser and styling
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const sourceFile = path.join(__dirname, '../src/utils/dom_parser.ts');
const targetFile = path.join(__dirname, '../tools/dom-parser-module.js');
const tempFile = path.join(__dirname, '../temp_dom_parser.js');

// CSS file paths
const sourceCssFile = path.join(__dirname, '../src/assets/css/summary.css');
const targetCssFile = path.join(__dirname, '../tools/summary.css');

function syncDomParser() {
    try {
        if (!fs.existsSync(sourceFile)) {
            console.error('‚ùå Source file not found:', sourceFile);
            return;
        }

        console.log('üîÑ Syncing dom_parser.ts to dom-parser-module.js...');

        // Use TypeScript compiler to transpile the file
        const tscCommand = `npx tsc "${sourceFile}" --target ES2020 --module ES2020 --outDir "${path.dirname(tempFile)}" --outFile "${tempFile}" --skipLibCheck --moduleResolution node`;
        
        try {
            execSync(tscCommand, { stdio: 'pipe' });
        } catch (tscError) {
            // Fallback to manual conversion if tsc fails
            console.log('‚ö†Ô∏è TypeScript compiler failed, using manual conversion...');
            return manualConversion();
        }

        // Read the compiled JavaScript
        let jsContent = '';
        if (fs.existsSync(tempFile)) {
            jsContent = fs.readFileSync(tempFile, 'utf8');
            fs.unlinkSync(tempFile); // Clean up temp file
        } else {
            // Fallback to manual conversion
            return manualConversion();
        }

        // Add header comment
        const header = `// Auto-generated JavaScript version of src/utils/dom_parser.ts
// This file is automatically synchronized with the TypeScript source
// 
// DO NOT EDIT THIS FILE DIRECTLY - it will be overwritten
// Edit src/utils/dom_parser.ts instead and run: npm run sync-parser
//
// Last updated: ${new Date().toISOString()}

`;

        const finalContent = header + jsContent;

        // Ensure tools directory exists
        const toolsDir = path.dirname(targetFile);
        if (!fs.existsSync(toolsDir)) {
            fs.mkdirSync(toolsDir, { recursive: true });
        }

        // Write the JavaScript version
        fs.writeFileSync(targetFile, finalContent, 'utf8');

        console.log('‚úÖ Successfully synced dom_parser.ts ‚Üí tools/dom-parser-module.js');
        console.log(`üìÅ Generated: ${targetFile}`);

        // Copy CSS file for consistent styling
        syncCssFile();
        
    } catch (error) {
        console.error('‚ùå Error syncing dom parser:', error.message);
        process.exit(1);
    }
}

function manualConversion() {
    console.log('üîß Using manual TypeScript to JavaScript conversion...');
    
    // Read the TypeScript source
    const tsContent = fs.readFileSync(sourceFile, 'utf8');

    // More careful TypeScript to JavaScript conversion
    let jsContent = tsContent
        // Remove simple type annotations from function parameters (be more careful with regex)
        .replace(/function\s+(\w+)\s*\([^)]*\)/g, (match) => {
            // Remove type annotations from function parameters more carefully
            return match.replace(/:\s*[^,)]+/g, '');
        })
        // Remove return type annotations more carefully
        .replace(/\):\s*[^{]+\s*\{/g, ') {')
        // Remove TypeScript parameter type annotations in function definitions
        .replace(/function\([^)]*\)/g, (match) => {
            return match.replace(/:\s*[^,)]+/g, '');
        })
        // Handle object destructuring parameters with type annotations - more comprehensive
        .replace(/function\s*\(\{[^}]*\}:\s*\{[^}]*\}\)/g, (match) => {
            // Extract just the destructuring pattern without types
            const destructuringMatch = match.match(/function\s*\(\{([^}]+)\}:/);
            if (destructuringMatch) {
                const params = destructuringMatch[1]
                    .split(',')
                    .map(param => param.split(':')[0].trim())
                    .filter(param => param.length > 0);
                return `function({${params.join(', ')}})`;
            }
            return match;
        })
        // Additional cleanup for any remaining TypeScript parameter syntax
        .replace(/function\s*\([^)]*\?\s*[,)]/g, (match) => {
            return match.replace(/\?/g, '');
        })
        // Fix duplicate parameter names that may result from destructuring conversion
        .replace(/function\s*\(\{([^}]+)\}[^)]*\)/g, (match) => {
            const destructuringMatch = match.match(/function\s*\(\{([^}]+)\}/);
            if (destructuringMatch) {
                const params = destructuringMatch[1]
                    .split(',')
                    .map(param => param.split(':')[0].trim())
                    .filter(param => param.length > 0);
                return `function({${params.join(', ')}})`;
            }
            return match;
        })
        // Remove variable type annotations
        .replace(/let\s+(\w+):\s*[^=;]+/g, 'let $1')
        .replace(/const\s+(\w+):\s*[^=;]+/g, 'const $1')
        // Remove array type annotations
        .replace(/:\s*string\[\]/g, '')
        .replace(/:\s*number\[\]/g, '')
        // Remove TypeScript non-null assertion operator
        .replace(/\.pop\(\)!/g, '.pop()')
        // Remove TypeScript 'as' type assertions
        .replace(/\s+as\s+\w+/g, '')
        // Convert ES6 imports to browser-compatible format
        .replace(/^import\s+\{\s*marked\s*\}\s+from\s+['"]marked['"];?\s*$/gm, '// Import marked from CDN - should be loaded globally')
        .replace(/^import\s+.*DOMPurify.*$/gm, '// Import DOMPurify from CDN - should be loaded globally')
        .replace(/^import\s+.*hljs.*$/gm, '// Import hljs from CDN - should be loaded globally')
        // Add hljs global reference comment
        .replace(/renderer\.code = function/, '// hljs is expected to be loaded globally from CDN\n    renderer.code = function')
        // Fix marked API usage to use marked.parse() instead of marked()
        .replace(/const rawHtml = marked\(/g, 'const rawHtml = marked.parse(')
        // Fix variable declarations with array types
        .replace(/let\s+(\w+)= \[\]/g, 'let $1 = []');

    // Add header comment
    const header = `// Auto-generated JavaScript version of src/utils/dom_parser.ts
// This file is automatically synchronized with the TypeScript source
// 
// DO NOT EDIT THIS FILE DIRECTLY - it will be overwritten
// Edit src/utils/dom_parser.ts instead and run: npm run sync-parser
//
// Last updated: ${new Date().toISOString()}

`;

    const finalContent = header + jsContent;

    // Ensure tools directory exists
    const toolsDir = path.dirname(targetFile);
    if (!fs.existsSync(toolsDir)) {
        fs.mkdirSync(toolsDir, { recursive: true });
    }

    // Write the JavaScript version
    fs.writeFileSync(targetFile, finalContent, 'utf8');

    console.log('‚úÖ Successfully synced using manual conversion');
    console.log(`üìÅ Generated: ${targetFile}`);

    // Copy CSS file for consistent styling
    syncCssFile();
}

function syncCssFile() {
    try {
        if (!fs.existsSync(sourceCssFile)) {
            console.error('‚ùå Source CSS file not found:', sourceCssFile);
            return;
        }

        console.log('üé® Copying summary.css to tools folder...');

        // Read the CSS content
        const cssContent = fs.readFileSync(sourceCssFile, 'utf8');

        // Add header comment
        const header = `/* Auto-copied CSS from src/assets/css/summary.css
 * This file is automatically synchronized with the source
 * 
 * DO NOT EDIT THIS FILE DIRECTLY - it will be overwritten
 * Edit src/assets/css/summary.css instead and run: npm run sync-parser
 *
 * Last updated: ${new Date().toISOString()}
 */

`;

        const finalCssContent = header + cssContent;

        // Write the CSS file to tools folder
        fs.writeFileSync(targetCssFile, finalCssContent, 'utf8');

        console.log('‚úÖ Successfully copied summary.css ‚Üí tools/summary.css');
        console.log(`üé® Generated: ${targetCssFile}`);

    } catch (error) {
        console.error('‚ùå Error copying CSS file:', error.message);
        // Don't exit on CSS error, just warn
    }
}

// Run the sync
syncDomParser();